
Locker_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000084  00800060  000009f0  00000a64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b18  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000018dd  00000000  00000000  00000c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009cd  00000000  00000000  000024f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000dd1  00000000  00000000  00002ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a4  00000000  00000000  00003c98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000517  00000000  00000000  00003e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000baa  00000000  00000000  00004353  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00004efd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ef       	ldi	r30, 0xF0	; 240
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3e       	cpi	r26, 0xE4	; 228
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 fd 01 	call	0x3fa	; 0x3fa <main>
  7a:	0c 94 f6 04 	jmp	0x9ec	; 0x9ec <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <eeprom_write>:
* Purpose      : Write data on specific address on EEPROM
* Parameters   : Address and data
* Return value : void
*****************************************************************************/
void eeprom_write(uint8_t add, uint16_t data) {
	while(READBIT(EECR,EEWE) != 0);
  82:	e1 99       	sbic	0x1c, 1	; 28
  84:	fe cf       	rjmp	.-4      	; 0x82 <eeprom_write>
	EEAR = add;
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	9f bb       	out	0x1f, r25	; 31
  8a:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;
  8c:	6d bb       	out	0x1d, r22	; 29
	SETBIT(EECR,EEMWE);
  8e:	e2 9a       	sbi	0x1c, 2	; 28
	SETBIT(EECR,EEWE);
  90:	e1 9a       	sbi	0x1c, 1	; 28
  92:	08 95       	ret

00000094 <eeprom_read>:
* Purpose      : Read data from specific address on EEPROM
* Parameters   : Address
* Return value : Short data
*****************************************************************************/
uint16_t eeprom_read(uint8_t add) {
	while(READBIT(EECR,EEWE) != 0);
  94:	e1 99       	sbic	0x1c, 1	; 28
  96:	fe cf       	rjmp	.-4      	; 0x94 <eeprom_read>
	EEAR = add;
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	9f bb       	out	0x1f, r25	; 31
  9c:	8e bb       	out	0x1e, r24	; 30
	SETBIT(EECR,EERE);
  9e:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;
  a0:	8d b3       	in	r24, 0x1d	; 29
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	08 95       	ret

000000a6 <KEYPAD_init>:
* Purpose      : Initializing Keypad
* Parameters   : void
* Return value : void
*****************************************************************************/
void KEYPAD_init(void) {
	INIT_KEYPAD_PINS();
  a6:	80 ef       	ldi	r24, 0xF0	; 240
  a8:	84 bb       	out	0x14, r24	; 20
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	85 bb       	out	0x15, r24	; 21
  ae:	08 95       	ret

000000b0 <KEYPAD_read>:
* Purpose      : Read value from keypad
* Parameters   : void
* Return value : Character
*****************************************************************************/
int8_t KEYPAD_read(void) {
	K4(0);K5(1);K6(1);K7(1);
  b0:	ac 98       	cbi	0x15, 4	; 21
  b2:	ad 9a       	sbi	0x15, 5	; 21
  b4:	ae 9a       	sbi	0x15, 6	; 21
  b6:	af 9a       	sbi	0x15, 7	; 21
	if(K0() == 0) return KEYPAD_matrix[0];
  b8:	98 9b       	sbis	0x13, 0	; 19
  ba:	44 c0       	rjmp	.+136    	; 0x144 <KEYPAD_read+0x94>
	if(K1() == 0) return KEYPAD_matrix[1];
  bc:	99 9b       	sbis	0x13, 1	; 19
  be:	44 c0       	rjmp	.+136    	; 0x148 <KEYPAD_read+0x98>
	if(K2() == 0) return KEYPAD_matrix[2];
  c0:	9a 9b       	sbis	0x13, 2	; 19
  c2:	44 c0       	rjmp	.+136    	; 0x14c <KEYPAD_read+0x9c>
	if(K3() == 0) return KEYPAD_matrix[3];
  c4:	9b 9b       	sbis	0x13, 3	; 19
  c6:	44 c0       	rjmp	.+136    	; 0x150 <KEYPAD_read+0xa0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	8f e1       	ldi	r24, 0x1F	; 31
  ca:	9e e4       	ldi	r25, 0x4E	; 78
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <KEYPAD_read+0x1c>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <KEYPAD_read+0x22>
  d2:	00 00       	nop
	_delay_ms(5);
	
	K4(1);K5(0);K6(1);K7(1);
  d4:	ac 9a       	sbi	0x15, 4	; 21
  d6:	ad 98       	cbi	0x15, 5	; 21
  d8:	ae 9a       	sbi	0x15, 6	; 21
  da:	af 9a       	sbi	0x15, 7	; 21
	if(K0() == 0) return KEYPAD_matrix[4];
  dc:	98 9b       	sbis	0x13, 0	; 19
  de:	3a c0       	rjmp	.+116    	; 0x154 <KEYPAD_read+0xa4>
	if(K1() == 0) return KEYPAD_matrix[5];
  e0:	99 9b       	sbis	0x13, 1	; 19
  e2:	3a c0       	rjmp	.+116    	; 0x158 <KEYPAD_read+0xa8>
	if(K2() == 0) return KEYPAD_matrix[6];
  e4:	9a 9b       	sbis	0x13, 2	; 19
  e6:	3a c0       	rjmp	.+116    	; 0x15c <KEYPAD_read+0xac>
	if(K3() == 0) return KEYPAD_matrix[7];
  e8:	9b 9b       	sbis	0x13, 3	; 19
  ea:	3a c0       	rjmp	.+116    	; 0x160 <KEYPAD_read+0xb0>
  ec:	8f e1       	ldi	r24, 0x1F	; 31
  ee:	9e e4       	ldi	r25, 0x4E	; 78
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <KEYPAD_read+0x40>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <KEYPAD_read+0x46>
  f6:	00 00       	nop
	_delay_ms(5);
	
	K4(1);K5(1);K6(0);K7(1);
  f8:	ac 9a       	sbi	0x15, 4	; 21
  fa:	ad 9a       	sbi	0x15, 5	; 21
  fc:	ae 98       	cbi	0x15, 6	; 21
  fe:	af 9a       	sbi	0x15, 7	; 21
	if(K0() == 0) return KEYPAD_matrix[8];
 100:	98 9b       	sbis	0x13, 0	; 19
 102:	30 c0       	rjmp	.+96     	; 0x164 <KEYPAD_read+0xb4>
	if(K1() == 0) return KEYPAD_matrix[9];
 104:	99 9b       	sbis	0x13, 1	; 19
 106:	30 c0       	rjmp	.+96     	; 0x168 <KEYPAD_read+0xb8>
	if(K2() == 0) return KEYPAD_matrix[10];
 108:	9a 9b       	sbis	0x13, 2	; 19
 10a:	30 c0       	rjmp	.+96     	; 0x16c <KEYPAD_read+0xbc>
	if(K3() == 0) return KEYPAD_matrix[11];
 10c:	9b 9b       	sbis	0x13, 3	; 19
 10e:	30 c0       	rjmp	.+96     	; 0x170 <KEYPAD_read+0xc0>
 110:	8f e1       	ldi	r24, 0x1F	; 31
 112:	9e e4       	ldi	r25, 0x4E	; 78
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <KEYPAD_read+0x64>
 118:	00 c0       	rjmp	.+0      	; 0x11a <KEYPAD_read+0x6a>
 11a:	00 00       	nop
	_delay_ms(5);
	
	K4(1);K5(1);K6(1);K7(0);
 11c:	ac 9a       	sbi	0x15, 4	; 21
 11e:	ad 9a       	sbi	0x15, 5	; 21
 120:	ae 9a       	sbi	0x15, 6	; 21
 122:	af 98       	cbi	0x15, 7	; 21
	if(K0() == 0) return KEYPAD_matrix[12];
 124:	98 9b       	sbis	0x13, 0	; 19
 126:	26 c0       	rjmp	.+76     	; 0x174 <KEYPAD_read+0xc4>
	if(K1() == 0) return KEYPAD_matrix[13];
 128:	99 9b       	sbis	0x13, 1	; 19
 12a:	26 c0       	rjmp	.+76     	; 0x178 <KEYPAD_read+0xc8>
	if(K2() == 0) return KEYPAD_matrix[14];
 12c:	9a 9b       	sbis	0x13, 2	; 19
 12e:	26 c0       	rjmp	.+76     	; 0x17c <KEYPAD_read+0xcc>
	if(K3() == 0) return KEYPAD_matrix[15];
 130:	9b 9b       	sbis	0x13, 3	; 19
 132:	26 c0       	rjmp	.+76     	; 0x180 <KEYPAD_read+0xd0>
 134:	8f e1       	ldi	r24, 0x1F	; 31
 136:	9e e4       	ldi	r25, 0x4E	; 78
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <KEYPAD_read+0x88>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <KEYPAD_read+0x8e>
 13e:	00 00       	nop
	_delay_ms(5);
	
	
	
	return -1;
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	08 95       	ret
* Parameters   : void
* Return value : Character
*****************************************************************************/
int8_t KEYPAD_read(void) {
	K4(0);K5(1);K6(1);K7(1);
	if(K0() == 0) return KEYPAD_matrix[0];
 144:	87 e3       	ldi	r24, 0x37	; 55
 146:	08 95       	ret
	if(K1() == 0) return KEYPAD_matrix[1];
 148:	88 e3       	ldi	r24, 0x38	; 56
 14a:	08 95       	ret
	if(K2() == 0) return KEYPAD_matrix[2];
 14c:	89 e3       	ldi	r24, 0x39	; 57
 14e:	08 95       	ret
	if(K3() == 0) return KEYPAD_matrix[3];
 150:	8f e2       	ldi	r24, 0x2F	; 47
 152:	08 95       	ret
	_delay_ms(5);
	
	K4(1);K5(0);K6(1);K7(1);
	if(K0() == 0) return KEYPAD_matrix[4];
 154:	84 e3       	ldi	r24, 0x34	; 52
 156:	08 95       	ret
	if(K1() == 0) return KEYPAD_matrix[5];
 158:	85 e3       	ldi	r24, 0x35	; 53
 15a:	08 95       	ret
	if(K2() == 0) return KEYPAD_matrix[6];
 15c:	86 e3       	ldi	r24, 0x36	; 54
 15e:	08 95       	ret
	if(K3() == 0) return KEYPAD_matrix[7];
 160:	8a e2       	ldi	r24, 0x2A	; 42
 162:	08 95       	ret
	_delay_ms(5);
	
	K4(1);K5(1);K6(0);K7(1);
	if(K0() == 0) return KEYPAD_matrix[8];
 164:	81 e3       	ldi	r24, 0x31	; 49
 166:	08 95       	ret
	if(K1() == 0) return KEYPAD_matrix[9];
 168:	82 e3       	ldi	r24, 0x32	; 50
 16a:	08 95       	ret
	if(K2() == 0) return KEYPAD_matrix[10];
 16c:	83 e3       	ldi	r24, 0x33	; 51
 16e:	08 95       	ret
	if(K3() == 0) return KEYPAD_matrix[11];
 170:	8d e2       	ldi	r24, 0x2D	; 45
 172:	08 95       	ret
	_delay_ms(5);
	
	K4(1);K5(1);K6(1);K7(0);
	if(K0() == 0) return KEYPAD_matrix[12];
 174:	83 e6       	ldi	r24, 0x63	; 99
 176:	08 95       	ret
	if(K1() == 0) return KEYPAD_matrix[13];
 178:	80 e3       	ldi	r24, 0x30	; 48
 17a:	08 95       	ret
	if(K2() == 0) return KEYPAD_matrix[14];
 17c:	8d e3       	ldi	r24, 0x3D	; 61
 17e:	08 95       	ret
	if(K3() == 0) return KEYPAD_matrix[15];
 180:	8b e2       	ldi	r24, 0x2B	; 43
	_delay_ms(5);
	
	
	
	return -1;
 182:	08 95       	ret

00000184 <LCD_write_command>:
* Purpose      : Send command to LCD
* Parameters   : cmd
* Return value : void
*****************************************************************************/
void LCD_write_command(uint8_t data) {
	LCD_RS(0);
 184:	da 98       	cbi	0x1b, 2	; 27
	LCD_D7(READBIT(data,7));
 186:	88 23       	and	r24, r24
 188:	14 f4       	brge	.+4      	; 0x18e <LCD_write_command+0xa>
 18a:	df 9a       	sbi	0x1b, 7	; 27
 18c:	01 c0       	rjmp	.+2      	; 0x190 <LCD_write_command+0xc>
 18e:	df 98       	cbi	0x1b, 7	; 27
	LCD_D6(READBIT(data,6));
 190:	86 ff       	sbrs	r24, 6
 192:	02 c0       	rjmp	.+4      	; 0x198 <LCD_write_command+0x14>
 194:	de 9a       	sbi	0x1b, 6	; 27
 196:	01 c0       	rjmp	.+2      	; 0x19a <LCD_write_command+0x16>
 198:	de 98       	cbi	0x1b, 6	; 27
	LCD_D5(READBIT(data,5));
 19a:	85 ff       	sbrs	r24, 5
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <LCD_write_command+0x1e>
 19e:	dd 9a       	sbi	0x1b, 5	; 27
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <LCD_write_command+0x20>
 1a2:	dd 98       	cbi	0x1b, 5	; 27
	LCD_D4(READBIT(data,4));
 1a4:	84 ff       	sbrs	r24, 4
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <LCD_write_command+0x28>
 1a8:	dc 9a       	sbi	0x1b, 4	; 27
 1aa:	01 c0       	rjmp	.+2      	; 0x1ae <LCD_write_command+0x2a>
 1ac:	dc 98       	cbi	0x1b, 4	; 27
	LCD_EN(1);
 1ae:	db 9a       	sbi	0x1b, 3	; 27
 1b0:	ef e9       	ldi	r30, 0x9F	; 159
 1b2:	ff e0       	ldi	r31, 0x0F	; 15
 1b4:	31 97       	sbiw	r30, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <LCD_write_command+0x30>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <LCD_write_command+0x36>
 1ba:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 1bc:	db 98       	cbi	0x1b, 3	; 27
 1be:	ef e9       	ldi	r30, 0x9F	; 159
 1c0:	ff e0       	ldi	r31, 0x0F	; 15
 1c2:	31 97       	sbiw	r30, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <LCD_write_command+0x3e>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <LCD_write_command+0x44>
 1c8:	00 00       	nop
	_delay_ms(1);
	
	LCD_D7(READBIT(data,3));
 1ca:	83 ff       	sbrs	r24, 3
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <LCD_write_command+0x4e>
 1ce:	df 9a       	sbi	0x1b, 7	; 27
 1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <LCD_write_command+0x50>
 1d2:	df 98       	cbi	0x1b, 7	; 27
	LCD_D6(READBIT(data,2));
 1d4:	82 ff       	sbrs	r24, 2
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <LCD_write_command+0x58>
 1d8:	de 9a       	sbi	0x1b, 6	; 27
 1da:	01 c0       	rjmp	.+2      	; 0x1de <LCD_write_command+0x5a>
 1dc:	de 98       	cbi	0x1b, 6	; 27
	LCD_D5(READBIT(data,1));
 1de:	81 ff       	sbrs	r24, 1
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <LCD_write_command+0x62>
 1e2:	dd 9a       	sbi	0x1b, 5	; 27
 1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <LCD_write_command+0x64>
 1e6:	dd 98       	cbi	0x1b, 5	; 27
	LCD_D4(READBIT(data,0));
 1e8:	80 ff       	sbrs	r24, 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <LCD_write_command+0x6c>
 1ec:	dc 9a       	sbi	0x1b, 4	; 27
 1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <LCD_write_command+0x6e>
 1f0:	dc 98       	cbi	0x1b, 4	; 27
	LCD_EN(1);
 1f2:	db 9a       	sbi	0x1b, 3	; 27
 1f4:	8f e9       	ldi	r24, 0x9F	; 159
 1f6:	9f e0       	ldi	r25, 0x0F	; 15
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <LCD_write_command+0x74>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <LCD_write_command+0x7a>
 1fe:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 200:	db 98       	cbi	0x1b, 3	; 27
 202:	ef e9       	ldi	r30, 0x9F	; 159
 204:	ff e0       	ldi	r31, 0x0F	; 15
 206:	31 97       	sbiw	r30, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <LCD_write_command+0x82>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <LCD_write_command+0x88>
 20c:	00 00       	nop
 20e:	08 95       	ret

00000210 <LCD_init>:
* Purpose      : initialize LCD to work in 4-bit mode - clear lcd - cursor off
* Parameters   : void
* Return value : void
*****************************************************************************/
void LCD_init(void) {
	LCD_PINS_INIT();
 210:	8a b3       	in	r24, 0x1a	; 26
 212:	8d 6f       	ori	r24, 0xFD	; 253
 214:	8a bb       	out	0x1a, r24	; 26
	LCD_write_command(0x3);
 216:	83 e0       	ldi	r24, 0x03	; 3
 218:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
 21c:	8f e7       	ldi	r24, 0x7F	; 127
 21e:	9e e3       	ldi	r25, 0x3E	; 62
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <LCD_init+0x10>
 224:	00 c0       	rjmp	.+0      	; 0x226 <LCD_init+0x16>
 226:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x3);
 228:	83 e0       	ldi	r24, 0x03	; 3
 22a:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
 22e:	8f e7       	ldi	r24, 0x7F	; 127
 230:	9e e3       	ldi	r25, 0x3E	; 62
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <LCD_init+0x22>
 236:	00 c0       	rjmp	.+0      	; 0x238 <LCD_init+0x28>
 238:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x3);
 23a:	83 e0       	ldi	r24, 0x03	; 3
 23c:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
 240:	8f e7       	ldi	r24, 0x7F	; 127
 242:	9e e3       	ldi	r25, 0x3E	; 62
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <LCD_init+0x34>
 248:	00 c0       	rjmp	.+0      	; 0x24a <LCD_init+0x3a>
 24a:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x2);
 24c:	82 e0       	ldi	r24, 0x02	; 2
 24e:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
	LCD_write_command(0x28);
 252:	88 e2       	ldi	r24, 0x28	; 40
 254:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
	LCD_write_command(0x1);
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
	LCD_write_command(0x6);
 25e:	86 e0       	ldi	r24, 0x06	; 6
 260:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
	LCD_write_command(0xc);
 264:	8c e0       	ldi	r24, 0x0C	; 12
 266:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
 26a:	9f ef       	ldi	r25, 0xFF	; 255
 26c:	29 ef       	ldi	r18, 0xF9	; 249
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	91 50       	subi	r25, 0x01	; 1
 272:	20 40       	sbci	r18, 0x00	; 0
 274:	80 40       	sbci	r24, 0x00	; 0
 276:	e1 f7       	brne	.-8      	; 0x270 <LCD_init+0x60>
 278:	00 c0       	rjmp	.+0      	; 0x27a <LCD_init+0x6a>
 27a:	00 00       	nop
 27c:	08 95       	ret

0000027e <LCD_write_char>:
* Purpose      : Write character to LCD
* Parameters   : char
* Return value : void
*****************************************************************************/
void LCD_write_char(uint8_t data) {
	LCD_RS(1);
 27e:	da 9a       	sbi	0x1b, 2	; 27
	LCD_D7(READBIT(data,7));
 280:	88 23       	and	r24, r24
 282:	14 f4       	brge	.+4      	; 0x288 <LCD_write_char+0xa>
 284:	df 9a       	sbi	0x1b, 7	; 27
 286:	01 c0       	rjmp	.+2      	; 0x28a <LCD_write_char+0xc>
 288:	df 98       	cbi	0x1b, 7	; 27
	LCD_D6(READBIT(data,6));
 28a:	86 ff       	sbrs	r24, 6
 28c:	02 c0       	rjmp	.+4      	; 0x292 <LCD_write_char+0x14>
 28e:	de 9a       	sbi	0x1b, 6	; 27
 290:	01 c0       	rjmp	.+2      	; 0x294 <LCD_write_char+0x16>
 292:	de 98       	cbi	0x1b, 6	; 27
	LCD_D5(READBIT(data,5));
 294:	85 ff       	sbrs	r24, 5
 296:	02 c0       	rjmp	.+4      	; 0x29c <LCD_write_char+0x1e>
 298:	dd 9a       	sbi	0x1b, 5	; 27
 29a:	01 c0       	rjmp	.+2      	; 0x29e <LCD_write_char+0x20>
 29c:	dd 98       	cbi	0x1b, 5	; 27
	LCD_D4(READBIT(data,4));
 29e:	84 ff       	sbrs	r24, 4
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <LCD_write_char+0x28>
 2a2:	dc 9a       	sbi	0x1b, 4	; 27
 2a4:	01 c0       	rjmp	.+2      	; 0x2a8 <LCD_write_char+0x2a>
 2a6:	dc 98       	cbi	0x1b, 4	; 27
	LCD_EN(1);
 2a8:	db 9a       	sbi	0x1b, 3	; 27
 2aa:	ef e9       	ldi	r30, 0x9F	; 159
 2ac:	ff e0       	ldi	r31, 0x0F	; 15
 2ae:	31 97       	sbiw	r30, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <LCD_write_char+0x30>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <LCD_write_char+0x36>
 2b4:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 2b6:	db 98       	cbi	0x1b, 3	; 27
 2b8:	ef e9       	ldi	r30, 0x9F	; 159
 2ba:	ff e0       	ldi	r31, 0x0F	; 15
 2bc:	31 97       	sbiw	r30, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <LCD_write_char+0x3e>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <LCD_write_char+0x44>
 2c2:	00 00       	nop
	_delay_ms(1);
	
	LCD_D7(READBIT(data,3));
 2c4:	83 ff       	sbrs	r24, 3
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <LCD_write_char+0x4e>
 2c8:	df 9a       	sbi	0x1b, 7	; 27
 2ca:	01 c0       	rjmp	.+2      	; 0x2ce <LCD_write_char+0x50>
 2cc:	df 98       	cbi	0x1b, 7	; 27
	LCD_D6(READBIT(data,2));
 2ce:	82 ff       	sbrs	r24, 2
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <LCD_write_char+0x58>
 2d2:	de 9a       	sbi	0x1b, 6	; 27
 2d4:	01 c0       	rjmp	.+2      	; 0x2d8 <LCD_write_char+0x5a>
 2d6:	de 98       	cbi	0x1b, 6	; 27
	LCD_D5(READBIT(data,1));
 2d8:	81 ff       	sbrs	r24, 1
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <LCD_write_char+0x62>
 2dc:	dd 9a       	sbi	0x1b, 5	; 27
 2de:	01 c0       	rjmp	.+2      	; 0x2e2 <LCD_write_char+0x64>
 2e0:	dd 98       	cbi	0x1b, 5	; 27
	LCD_D4(READBIT(data,0));
 2e2:	80 ff       	sbrs	r24, 0
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <LCD_write_char+0x6c>
 2e6:	dc 9a       	sbi	0x1b, 4	; 27
 2e8:	01 c0       	rjmp	.+2      	; 0x2ec <LCD_write_char+0x6e>
 2ea:	dc 98       	cbi	0x1b, 4	; 27
	LCD_EN(1);
 2ec:	db 9a       	sbi	0x1b, 3	; 27
 2ee:	8f e9       	ldi	r24, 0x9F	; 159
 2f0:	9f e0       	ldi	r25, 0x0F	; 15
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <LCD_write_char+0x74>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <LCD_write_char+0x7a>
 2f8:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 2fa:	db 98       	cbi	0x1b, 3	; 27
 2fc:	ef e9       	ldi	r30, 0x9F	; 159
 2fe:	ff e0       	ldi	r31, 0x0F	; 15
 300:	31 97       	sbiw	r30, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <LCD_write_char+0x82>
 304:	00 c0       	rjmp	.+0      	; 0x306 <LCD_write_char+0x88>
 306:	00 00       	nop
 308:	08 95       	ret

0000030a <LCD_write_string>:
* Function Name: LCD_write_string
* Purpose      : Write string to LCD
* Parameters   : Address of first char in string, length of string
* Return value : void
*****************************************************************************/
void LCD_write_string(uint8_t *data) {
 30a:	0f 93       	push	r16
 30c:	1f 93       	push	r17
 30e:	cf 93       	push	r28
 310:	fc 01       	movw	r30, r24
	
	uint8_t i;

	for(i = 0; (data[i] != '\0'); i++) {
 312:	80 81       	ld	r24, Z
 314:	88 23       	and	r24, r24
 316:	59 f0       	breq	.+22     	; 0x32e <LCD_write_string+0x24>
 318:	8f 01       	movw	r16, r30
 31a:	c0 e0       	ldi	r28, 0x00	; 0
		LCD_write_char(data[i]);
 31c:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_write_char>
*****************************************************************************/
void LCD_write_string(uint8_t *data) {
	
	uint8_t i;

	for(i = 0; (data[i] != '\0'); i++) {
 320:	cf 5f       	subi	r28, 0xFF	; 255
 322:	f8 01       	movw	r30, r16
 324:	ec 0f       	add	r30, r28
 326:	f1 1d       	adc	r31, r1
 328:	80 81       	ld	r24, Z
 32a:	81 11       	cpse	r24, r1
 32c:	f7 cf       	rjmp	.-18     	; 0x31c <LCD_write_string+0x12>
		LCD_write_char(data[i]);
	}
	
}
 32e:	cf 91       	pop	r28
 330:	1f 91       	pop	r17
 332:	0f 91       	pop	r16
 334:	08 95       	ret

00000336 <get_data>:
* Function Name: get_data
* Purpose      : get data from keypad
* Parameters   : void
* Return value : character
*****************************************************************************/
uint8_t get_data(void) {
 336:	cf 93       	push	r28
	uint8_t key;
	while(KEYPAD_read() == -1){}
 338:	0e 94 58 00 	call	0xb0	; 0xb0 <KEYPAD_read>
 33c:	8f 3f       	cpi	r24, 0xFF	; 255
 33e:	e1 f3       	breq	.-8      	; 0x338 <get_data+0x2>
	key = KEYPAD_read();
 340:	0e 94 58 00 	call	0xb0	; 0xb0 <KEYPAD_read>
 344:	c8 2f       	mov	r28, r24
	while(KEYPAD_read() != -1){}
 346:	0e 94 58 00 	call	0xb0	; 0xb0 <KEYPAD_read>
 34a:	8f 3f       	cpi	r24, 0xFF	; 255
 34c:	e1 f7       	brne	.-8      	; 0x346 <get_data+0x10>
	return key;
}
 34e:	8c 2f       	mov	r24, r28
 350:	cf 91       	pop	r28
 352:	08 95       	ret

00000354 <STRING_TO_INT>:
* Function Name: STRING_TO_INT
* Purpose      : Convert string to integer
* Parameters   : Address of first element of string
* Return value : Short
*****************************************************************************/
uint16_t STRING_TO_INT(uint8_t *str) {
 354:	fc 01       	movw	r30, r24
	uint8_t i=0;
	uint16_t num=0;
 356:	20 e0       	ldi	r18, 0x00	; 0
 358:	30 e0       	ldi	r19, 0x00	; 0
* Purpose      : Convert string to integer
* Parameters   : Address of first element of string
* Return value : Short
*****************************************************************************/
uint16_t STRING_TO_INT(uint8_t *str) {
	uint8_t i=0;
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	16 c0       	rjmp	.+44     	; 0x38a <STRING_TO_INT+0x36>
	uint16_t num=0;
	while (i<4) {
 35e:	94 30       	cpi	r25, 0x04	; 4
 360:	f0 f3       	brcs	.-4      	; 0x35e <STRING_TO_INT+0xa>
 362:	19 c0       	rjmp	.+50     	; 0x396 <STRING_TO_INT+0x42>
 364:	b9 01       	movw	r22, r18
 366:	66 0f       	add	r22, r22
 368:	77 1f       	adc	r23, r23
 36a:	22 0f       	add	r18, r18
 36c:	33 1f       	adc	r19, r19
 36e:	22 0f       	add	r18, r18
 370:	33 1f       	adc	r19, r19
 372:	22 0f       	add	r18, r18
 374:	33 1f       	adc	r19, r19
 376:	26 0f       	add	r18, r22
 378:	37 1f       	adc	r19, r23
 37a:	20 53       	subi	r18, 0x30	; 48
 37c:	31 09       	sbc	r19, r1
		if ((str[i] >= '0') && (str[i] <= '9')) {
			num = num*10 + str[i] -'0';
 37e:	24 0f       	add	r18, r20
 380:	31 1d       	adc	r19, r1
			i++;
 382:	9f 5f       	subi	r25, 0xFF	; 255
 384:	31 96       	adiw	r30, 0x01	; 1
* Return value : Short
*****************************************************************************/
uint16_t STRING_TO_INT(uint8_t *str) {
	uint8_t i=0;
	uint16_t num=0;
	while (i<4) {
 386:	94 30       	cpi	r25, 0x04	; 4
 388:	31 f0       	breq	.+12     	; 0x396 <STRING_TO_INT+0x42>
		if ((str[i] >= '0') && (str[i] <= '9')) {
 38a:	40 81       	ld	r20, Z
 38c:	80 ed       	ldi	r24, 0xD0	; 208
 38e:	84 0f       	add	r24, r20
 390:	8a 30       	cpi	r24, 0x0A	; 10
 392:	28 f7       	brcc	.-54     	; 0x35e <STRING_TO_INT+0xa>
 394:	e7 cf       	rjmp	.-50     	; 0x364 <STRING_TO_INT+0x10>
			num = num*10 + str[i] -'0';
			i++;
		}
	}
	return num;
}
 396:	c9 01       	movw	r24, r18
 398:	08 95       	ret

0000039a <get_password>:
* Function Name: get_password
* Purpose      : Allow user to enter password
* Parameters   : void
* Return value : Short
*****************************************************************************/
uint16_t get_password(void) {
 39a:	ef 92       	push	r14
 39c:	ff 92       	push	r15
 39e:	0f 93       	push	r16
 3a0:	1f 93       	push	r17
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	00 d0       	rcall	.+0      	; 0x3a8 <get_password+0xe>
 3a8:	00 d0       	rcall	.+0      	; 0x3aa <get_password+0x10>
 3aa:	cd b7       	in	r28, 0x3d	; 61
 3ac:	de b7       	in	r29, 0x3e	; 62
 3ae:	ce 01       	movw	r24, r28
 3b0:	01 96       	adiw	r24, 0x01	; 1
 3b2:	7c 01       	movw	r14, r24
	uint8_t i = 0, KEY_DATA, number[4];
 3b4:	00 e0       	ldi	r16, 0x00	; 0
	
	while (i<4) {
		KEY_DATA = get_data();
 3b6:	0e 94 9b 01 	call	0x336	; 0x336 <get_data>
 3ba:	18 2f       	mov	r17, r24
		if ((KEY_DATA >= '0') && (KEY_DATA <= '9')) {
 3bc:	80 ed       	ldi	r24, 0xD0	; 208
 3be:	81 0f       	add	r24, r17
 3c0:	8a 30       	cpi	r24, 0x0A	; 10
 3c2:	50 f4       	brcc	.+20     	; 0x3d8 <get_password+0x3e>
			LCD_write_char('*');
 3c4:	8a e2       	ldi	r24, 0x2A	; 42
 3c6:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_write_char>
			number[i] = KEY_DATA;
 3ca:	f7 01       	movw	r30, r14
 3cc:	11 93       	st	Z+, r17
 3ce:	7f 01       	movw	r14, r30
			i++;
 3d0:	0f 5f       	subi	r16, 0xFF	; 255
* Return value : Short
*****************************************************************************/
uint16_t get_password(void) {
	uint8_t i = 0, KEY_DATA, number[4];
	
	while (i<4) {
 3d2:	04 30       	cpi	r16, 0x04	; 4
 3d4:	19 f0       	breq	.+6      	; 0x3dc <get_password+0x42>
 3d6:	ef cf       	rjmp	.-34     	; 0x3b6 <get_password+0x1c>
 3d8:	04 30       	cpi	r16, 0x04	; 4
 3da:	68 f3       	brcs	.-38     	; 0x3b6 <get_password+0x1c>
			number[i] = KEY_DATA;
			i++;
		}
	}
	
	return STRING_TO_INT(number);
 3dc:	ce 01       	movw	r24, r28
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	0e 94 aa 01 	call	0x354	; 0x354 <STRING_TO_INT>
 3e4:	0f 90       	pop	r0
 3e6:	0f 90       	pop	r0
 3e8:	0f 90       	pop	r0
 3ea:	0f 90       	pop	r0
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	1f 91       	pop	r17
 3f2:	0f 91       	pop	r16
 3f4:	ff 90       	pop	r15
 3f6:	ef 90       	pop	r14
 3f8:	08 95       	ret

000003fa <main>:
#include "KEYPAD.h"
#include "eeprom.h"
#include "Locker.h"

int main(void)
{
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	cd b7       	in	r28, 0x3d	; 61
 400:	de b7       	in	r29, 0x3e	; 62
 402:	ce 59       	subi	r28, 0x9E	; 158
 404:	d1 09       	sbc	r29, r1
 406:	0f b6       	in	r0, 0x3f	; 63
 408:	f8 94       	cli
 40a:	de bf       	out	0x3e, r29	; 62
 40c:	0f be       	out	0x3f, r0	; 63
 40e:	cd bf       	out	0x3d, r28	; 61
	eeprom_write(DEFAULT_PASSWORD_ADDRESS_2, (default_password>>8));
	
	// Initialize Texts
	
	uint8_t welcome_text[] = "WELCOME :)";
	uint8_t create_password_text[] = "New Password";
 410:	ce 01       	movw	r24, r28
 412:	0c 96       	adiw	r24, 0x0c	; 12
 414:	cb 57       	subi	r28, 0x7B	; 123
 416:	df 4f       	sbci	r29, 0xFF	; 255
 418:	99 83       	std	Y+1, r25	; 0x01
 41a:	88 83       	st	Y, r24
 41c:	c5 58       	subi	r28, 0x85	; 133
 41e:	d0 40       	sbci	r29, 0x00	; 0
	uint8_t old_password_text[] = "Old Password";
	uint8_t enter_password_text[] = "Enter Password";
 420:	4a 96       	adiw	r24, 0x1a	; 26
 422:	c9 57       	subi	r28, 0x79	; 121
 424:	df 4f       	sbci	r29, 0xFF	; 255
 426:	99 83       	std	Y+1, r25	; 0x01
 428:	88 83       	st	Y, r24
 42a:	c7 58       	subi	r28, 0x87	; 135
 42c:	d0 40       	sbci	r29, 0x00	; 0
	uint8_t hint_password_text[] = "----";
	uint8_t correct_password_text[] = "Correct Password";
	uint8_t wrong_password_text[] = "Wrong Password";
 42e:	2e 01       	movw	r4, r28
 430:	9b e4       	ldi	r25, 0x4B	; 75
 432:	49 0e       	add	r4, r25
 434:	51 1c       	adc	r5, r1
	uint8_t much_wrong_password_text[] = "Too Much Trials";
	uint8_t try_again_text[] = "Try Again";
 436:	1e 01       	movw	r2, r28
 438:	2a e6       	ldi	r18, 0x6A	; 106
 43a:	22 0e       	add	r2, r18
 43c:	31 1c       	adc	r3, r1
	uint8_t locker_oppened_text[] = "Locker Is Opened";
 43e:	ce 01       	movw	r24, r28
 440:	8c 58       	subi	r24, 0x8C	; 140
 442:	9f 4f       	sbci	r25, 0xFF	; 255
 444:	c7 57       	subi	r28, 0x77	; 119
 446:	df 4f       	sbci	r29, 0xFF	; 255
 448:	99 83       	std	Y+1, r25	; 0x01
 44a:	88 83       	st	Y, r24
 44c:	c9 58       	subi	r28, 0x89	; 137
 44e:	d0 40       	sbci	r29, 0x00	; 0
			LCD_write_string(welcome_text);
			_delay_ms(1000);
			LCD_write_command(1);
			
			LCD_write_command(0x82);
			LCD_write_string(create_password_text);
 450:	cb 57       	subi	r28, 0x7B	; 123
 452:	df 4f       	sbci	r29, 0xFF	; 255
 454:	98 81       	ld	r25, Y
 456:	c5 58       	subi	r28, 0x85	; 133
 458:	d0 40       	sbci	r29, 0x00	; 0
 45a:	c5 57       	subi	r28, 0x75	; 117
 45c:	df 4f       	sbci	r29, 0xFF	; 255
 45e:	98 83       	st	Y, r25
 460:	cb 58       	subi	r28, 0x8B	; 139
 462:	d0 40       	sbci	r29, 0x00	; 0
 464:	ca 57       	subi	r28, 0x7A	; 122
 466:	df 4f       	sbci	r29, 0xFF	; 255
 468:	28 81       	ld	r18, Y
 46a:	c6 58       	subi	r28, 0x86	; 134
 46c:	d0 40       	sbci	r29, 0x00	; 0
 46e:	c4 57       	subi	r28, 0x74	; 116
 470:	df 4f       	sbci	r29, 0xFF	; 255
 472:	28 83       	st	Y, r18
 474:	cc 58       	subi	r28, 0x8C	; 140
 476:	d0 40       	sbci	r29, 0x00	; 0
			BUZZER_EN(0)
			LCD_write_command(1);
			
			while (1) {
				LCD_write_command(0x81);
				LCD_write_string(enter_password_text);
 478:	c9 57       	subi	r28, 0x79	; 121
 47a:	df 4f       	sbci	r29, 0xFF	; 255
 47c:	a8 80       	ld	r10, Y
 47e:	c7 58       	subi	r28, 0x87	; 135
 480:	d0 40       	sbci	r29, 0x00	; 0
 482:	c8 57       	subi	r28, 0x78	; 120
 484:	df 4f       	sbci	r29, 0xFF	; 255
 486:	b8 80       	ld	r11, Y
 488:	c8 58       	subi	r28, 0x88	; 136
 48a:	d0 40       	sbci	r29, 0x00	; 0
	// If password is correct and locker's door is opened 
	
	while (1) {
		
		LCD_write_command(1);
		LCD_write_string(locker_oppened_text);
 48c:	c7 57       	subi	r28, 0x77	; 119
 48e:	df 4f       	sbci	r29, 0xFF	; 255
 490:	88 81       	ld	r24, Y
 492:	c9 58       	subi	r28, 0x89	; 137
 494:	d0 40       	sbci	r29, 0x00	; 0
 496:	c3 57       	subi	r28, 0x73	; 115
 498:	df 4f       	sbci	r29, 0xFF	; 255
 49a:	88 83       	st	Y, r24
 49c:	cd 58       	subi	r28, 0x8D	; 141
 49e:	d0 40       	sbci	r29, 0x00	; 0
 4a0:	c6 57       	subi	r28, 0x76	; 118
 4a2:	df 4f       	sbci	r29, 0xFF	; 255
 4a4:	98 81       	ld	r25, Y
 4a6:	ca 58       	subi	r28, 0x8A	; 138
 4a8:	d0 40       	sbci	r29, 0x00	; 0
 4aa:	c2 57       	subi	r28, 0x72	; 114
 4ac:	df 4f       	sbci	r29, 0xFF	; 255
 4ae:	98 83       	st	Y, r25
 4b0:	ce 58       	subi	r28, 0x8E	; 142
 4b2:	d0 40       	sbci	r29, 0x00	; 0
				eeprom_write(USER_PASSWORD_ADDRESS_2, (user_password>>8));
				
			} else {
				
				LCD_write_command(0x81);
				LCD_write_string(wrong_password_text);
 4b4:	cf 56       	subi	r28, 0x6F	; 111
 4b6:	df 4f       	sbci	r29, 0xFF	; 255
 4b8:	48 82       	st	Y, r4
 4ba:	c1 59       	subi	r28, 0x91	; 145
 4bc:	d0 40       	sbci	r29, 0x00	; 0
 4be:	ce 56       	subi	r28, 0x6E	; 110
 4c0:	df 4f       	sbci	r29, 0xFF	; 255
 4c2:	58 82       	st	Y, r5
 4c4:	c2 59       	subi	r28, 0x92	; 146
 4c6:	d0 40       	sbci	r29, 0x00	; 0
				LCD_write_command(0xc4);
				LCD_write_string(try_again_text);
 4c8:	cd 56       	subi	r28, 0x6D	; 109
 4ca:	df 4f       	sbci	r29, 0xFF	; 255
 4cc:	28 82       	st	Y, r2
 4ce:	c3 59       	subi	r28, 0x93	; 147
 4d0:	d0 40       	sbci	r29, 0x00	; 0
 4d2:	cc 56       	subi	r28, 0x6C	; 108
 4d4:	df 4f       	sbci	r29, 0xFF	; 255
 4d6:	38 82       	st	Y, r3
 4d8:	c4 59       	subi	r28, 0x94	; 148
 4da:	d0 40       	sbci	r29, 0x00	; 0
 4dc:	8b 2d       	mov	r24, r11
 4de:	ba 2c       	mov	r11, r10
 4e0:	a8 2e       	mov	r10, r24
int main(void)
{
	// Initializing Drivers
	
	START:
	LCD_init();
 4e2:	0e 94 08 01 	call	0x210	; 0x210 <LCD_init>
	KEYPAD_init();
 4e6:	0e 94 53 00 	call	0xa6	; 0xa6 <KEYPAD_init>
	LOCK_DOOR_SENSOR()
 4ea:	d9 9a       	sbi	0x1b, 1	; 27
	// Initialize default password
	
	uint16_t default_password = 0; //0000
	uint16_t user_password;
	
	eeprom_write(DEFAULT_PASSWORD_ADDRESS_1, default_password);
 4ec:	60 e0       	ldi	r22, 0x00	; 0
 4ee:	70 e0       	ldi	r23, 0x00	; 0
 4f0:	8a e0       	ldi	r24, 0x0A	; 10
 4f2:	0e 94 41 00 	call	0x82	; 0x82 <eeprom_write>
	eeprom_write(DEFAULT_PASSWORD_ADDRESS_2, (default_password>>8));
 4f6:	60 e0       	ldi	r22, 0x00	; 0
 4f8:	70 e0       	ldi	r23, 0x00	; 0
 4fa:	8b e0       	ldi	r24, 0x0B	; 11
 4fc:	0e 94 41 00 	call	0x82	; 0x82 <eeprom_write>
	
	// Initialize Texts
	
	uint8_t welcome_text[] = "WELCOME :)";
 500:	8b e0       	ldi	r24, 0x0B	; 11
 502:	e0 e6       	ldi	r30, 0x60	; 96
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	de 01       	movw	r26, r28
 508:	11 96       	adiw	r26, 0x01	; 1
 50a:	01 90       	ld	r0, Z+
 50c:	0d 92       	st	X+, r0
 50e:	8a 95       	dec	r24
 510:	e1 f7       	brne	.-8      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
	uint8_t create_password_text[] = "New Password";
 512:	8d e0       	ldi	r24, 0x0D	; 13
 514:	eb e6       	ldi	r30, 0x6B	; 107
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	de 01       	movw	r26, r28
 51a:	1c 96       	adiw	r26, 0x0c	; 12
 51c:	01 90       	ld	r0, Z+
 51e:	0d 92       	st	X+, r0
 520:	8a 95       	dec	r24
 522:	e1 f7       	brne	.-8      	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
	uint8_t old_password_text[] = "Old Password";
 524:	8d e0       	ldi	r24, 0x0D	; 13
 526:	e8 e7       	ldi	r30, 0x78	; 120
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	de 01       	movw	r26, r28
 52c:	59 96       	adiw	r26, 0x19	; 25
 52e:	01 90       	ld	r0, Z+
 530:	0d 92       	st	X+, r0
 532:	8a 95       	dec	r24
 534:	e1 f7       	brne	.-8      	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
	uint8_t enter_password_text[] = "Enter Password";
 536:	8f e0       	ldi	r24, 0x0F	; 15
 538:	e5 e8       	ldi	r30, 0x85	; 133
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	de 01       	movw	r26, r28
 53e:	96 96       	adiw	r26, 0x26	; 38
 540:	01 90       	ld	r0, Z+
 542:	0d 92       	st	X+, r0
 544:	8a 95       	dec	r24
 546:	e1 f7       	brne	.-8      	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
	uint8_t hint_password_text[] = "----";
 548:	85 e0       	ldi	r24, 0x05	; 5
 54a:	e4 e9       	ldi	r30, 0x94	; 148
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	de 01       	movw	r26, r28
 550:	d5 96       	adiw	r26, 0x35	; 53
 552:	01 90       	ld	r0, Z+
 554:	0d 92       	st	X+, r0
 556:	8a 95       	dec	r24
 558:	e1 f7       	brne	.-8      	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
	uint8_t correct_password_text[] = "Correct Password";
 55a:	81 e1       	ldi	r24, 0x11	; 17
 55c:	e9 e9       	ldi	r30, 0x99	; 153
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	de 01       	movw	r26, r28
 562:	da 96       	adiw	r26, 0x3a	; 58
 564:	01 90       	ld	r0, Z+
 566:	0d 92       	st	X+, r0
 568:	8a 95       	dec	r24
 56a:	e1 f7       	brne	.-8      	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
	uint8_t wrong_password_text[] = "Wrong Password";
 56c:	8f e0       	ldi	r24, 0x0F	; 15
 56e:	ea ea       	ldi	r30, 0xAA	; 170
 570:	f0 e0       	ldi	r31, 0x00	; 0
 572:	d2 01       	movw	r26, r4
 574:	01 90       	ld	r0, Z+
 576:	0d 92       	st	X+, r0
 578:	8a 95       	dec	r24
 57a:	e1 f7       	brne	.-8      	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
	uint8_t much_wrong_password_text[] = "Too Much Trials";
 57c:	80 e1       	ldi	r24, 0x10	; 16
 57e:	e9 eb       	ldi	r30, 0xB9	; 185
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	de 01       	movw	r26, r28
 584:	a6 5a       	subi	r26, 0xA6	; 166
 586:	bf 4f       	sbci	r27, 0xFF	; 255
 588:	01 90       	ld	r0, Z+
 58a:	0d 92       	st	X+, r0
 58c:	8a 95       	dec	r24
 58e:	e1 f7       	brne	.-8      	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
	uint8_t try_again_text[] = "Try Again";
 590:	8a e0       	ldi	r24, 0x0A	; 10
 592:	e9 ec       	ldi	r30, 0xC9	; 201
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	d1 01       	movw	r26, r2
 598:	01 90       	ld	r0, Z+
 59a:	0d 92       	st	X+, r0
 59c:	8a 95       	dec	r24
 59e:	e1 f7       	brne	.-8      	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
	uint8_t locker_oppened_text[] = "Locker Is Opened";
 5a0:	81 e1       	ldi	r24, 0x11	; 17
 5a2:	e3 ed       	ldi	r30, 0xD3	; 211
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	de 01       	movw	r26, r28
 5a8:	ac 58       	subi	r26, 0x8C	; 140
 5aa:	bf 4f       	sbci	r27, 0xFF	; 255
 5ac:	01 90       	ld	r0, Z+
 5ae:	0d 92       	st	X+, r0
 5b0:	8a 95       	dec	r24
 5b2:	e1 f7       	brne	.-8      	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
	
    while (1) 
    {
		// First Time Program Run
		
		if (eeprom_read(FLAG_ADDRESS) == 255) {
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	0e 94 4a 00 	call	0x94	; 0x94 <eeprom_read>
 5ba:	8f 3f       	cpi	r24, 0xFF	; 255
 5bc:	91 05       	cpc	r25, r1
 5be:	09 f0       	breq	.+2      	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
 5c0:	47 c0       	rjmp	.+142    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
			eeprom_write(PASSWORD_COUNTER, 0);
 5c2:	60 e0       	ldi	r22, 0x00	; 0
 5c4:	70 e0       	ldi	r23, 0x00	; 0
 5c6:	8e e1       	ldi	r24, 0x1E	; 30
 5c8:	0e 94 41 00 	call	0x82	; 0x82 <eeprom_write>
			LCD_write_command(0x82);
 5cc:	82 e8       	ldi	r24, 0x82	; 130
 5ce:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
			LCD_write_string(welcome_text);
 5d2:	ce 01       	movw	r24, r28
 5d4:	01 96       	adiw	r24, 0x01	; 1
 5d6:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_write_string>
 5da:	2f ef       	ldi	r18, 0xFF	; 255
 5dc:	83 ed       	ldi	r24, 0xD3	; 211
 5de:	90 e3       	ldi	r25, 0x30	; 48
 5e0:	21 50       	subi	r18, 0x01	; 1
 5e2:	80 40       	sbci	r24, 0x00	; 0
 5e4:	90 40       	sbci	r25, 0x00	; 0
 5e6:	e1 f7       	brne	.-8      	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
 5e8:	00 c0       	rjmp	.+0      	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
 5ea:	00 00       	nop
			_delay_ms(1000);
			LCD_write_command(1);
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
			
			LCD_write_command(0x82);
 5f2:	82 e8       	ldi	r24, 0x82	; 130
 5f4:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
			LCD_write_string(create_password_text);
 5f8:	c5 57       	subi	r28, 0x75	; 117
 5fa:	df 4f       	sbci	r29, 0xFF	; 255
 5fc:	88 81       	ld	r24, Y
 5fe:	cb 58       	subi	r28, 0x8B	; 139
 600:	d0 40       	sbci	r29, 0x00	; 0
 602:	c4 57       	subi	r28, 0x74	; 116
 604:	df 4f       	sbci	r29, 0xFF	; 255
 606:	98 81       	ld	r25, Y
 608:	cc 58       	subi	r28, 0x8C	; 140
 60a:	d0 40       	sbci	r29, 0x00	; 0
 60c:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_write_string>
			LCD_write_command(0xc6);
 610:	86 ec       	ldi	r24, 0xC6	; 198
 612:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
			LCD_write_string(hint_password_text);
 616:	ce 01       	movw	r24, r28
 618:	c5 96       	adiw	r24, 0x35	; 53
 61a:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_write_string>

			LCD_write_command(0xc6);
 61e:	86 ec       	ldi	r24, 0xC6	; 198
 620:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
			user_password = get_password();
 624:	0e 94 cd 01 	call	0x39a	; 0x39a <get_password>
 628:	08 2f       	mov	r16, r24
 62a:	19 2f       	mov	r17, r25
			LCD_write_command(1);
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
			
			eeprom_write(USER_PASSWORD_ADDRESS_1, user_password);
 632:	60 2f       	mov	r22, r16
 634:	71 2f       	mov	r23, r17
 636:	84 e1       	ldi	r24, 0x14	; 20
 638:	0e 94 41 00 	call	0x82	; 0x82 <eeprom_write>
			eeprom_write(USER_PASSWORD_ADDRESS_2, (user_password>>8));
 63c:	61 2f       	mov	r22, r17
 63e:	70 e0       	ldi	r23, 0x00	; 0
 640:	85 e1       	ldi	r24, 0x15	; 21
 642:	0e 94 41 00 	call	0x82	; 0x82 <eeprom_write>
			
			eeprom_write(FLAG_ADDRESS, 1);
 646:	61 e0       	ldi	r22, 0x01	; 1
 648:	70 e0       	ldi	r23, 0x00	; 0
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	0e 94 41 00 	call	0x82	; 0x82 <eeprom_write>
		}
		
		// Enter Password (3 times trials only)
		
		if ( eeprom_read(PASSWORD_COUNTER) < 3) {
 650:	8e e1       	ldi	r24, 0x1E	; 30
 652:	0e 94 4a 00 	call	0x94	; 0x94 <eeprom_read>
 656:	03 97       	sbiw	r24, 0x03	; 3
 658:	08 f0       	brcs	.+2      	; 0x65c <__LOCK_REGION_LENGTH__+0x25c>
 65a:	6a c0       	rjmp	.+212    	; 0x730 <__LOCK_REGION_LENGTH__+0x330>
			
			LCD_write_command(0x81);
 65c:	81 e8       	ldi	r24, 0x81	; 129
 65e:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
			LCD_write_string(enter_password_text);
 662:	8b 2d       	mov	r24, r11
 664:	9a 2d       	mov	r25, r10
 666:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_write_string>
			LCD_write_command(0xc6);
 66a:	86 ec       	ldi	r24, 0xC6	; 198
 66c:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
			LCD_write_string(hint_password_text);
 670:	ce 01       	movw	r24, r28
 672:	c5 96       	adiw	r24, 0x35	; 53
 674:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_write_string>
			
			LCD_write_command(0xc6);
 678:	86 ec       	ldi	r24, 0xC6	; 198
 67a:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
			user_password = get_password();
 67e:	0e 94 cd 01 	call	0x39a	; 0x39a <get_password>
 682:	6c 01       	movw	r12, r24
			LCD_write_command(1);
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
		
			if ((user_password == READ_PASSWORD(USER_PASSWORD_ADDRESS_1,USER_PASSWORD_ADDRESS_2)) || (user_password == READ_PASSWORD(DEFAULT_PASSWORD_ADDRESS_1,DEFAULT_PASSWORD_ADDRESS_2))) {
 68a:	84 e1       	ldi	r24, 0x14	; 20
 68c:	0e 94 4a 00 	call	0x94	; 0x94 <eeprom_read>
 690:	8c 01       	movw	r16, r24
 692:	85 e1       	ldi	r24, 0x15	; 21
 694:	0e 94 4a 00 	call	0x94	; 0x94 <eeprom_read>
 698:	98 2e       	mov	r9, r24
 69a:	81 2c       	mov	r8, r1
 69c:	08 29       	or	r16, r8
 69e:	19 29       	or	r17, r9
 6a0:	c0 16       	cp	r12, r16
 6a2:	d1 06       	cpc	r13, r17
 6a4:	71 f0       	breq	.+28     	; 0x6c2 <__LOCK_REGION_LENGTH__+0x2c2>
 6a6:	8a e0       	ldi	r24, 0x0A	; 10
 6a8:	0e 94 4a 00 	call	0x94	; 0x94 <eeprom_read>
 6ac:	8c 01       	movw	r16, r24
 6ae:	8b e0       	ldi	r24, 0x0B	; 11
 6b0:	0e 94 4a 00 	call	0x94	; 0x94 <eeprom_read>
 6b4:	78 2e       	mov	r7, r24
 6b6:	61 2c       	mov	r6, r1
 6b8:	06 29       	or	r16, r6
 6ba:	17 29       	or	r17, r7
 6bc:	c0 16       	cp	r12, r16
 6be:	d1 06       	cpc	r13, r17
 6c0:	99 f4       	brne	.+38     	; 0x6e8 <__LOCK_REGION_LENGTH__+0x2e8>
				
				LCD_write_string(correct_password_text);
 6c2:	ce 01       	movw	r24, r28
 6c4:	ca 96       	adiw	r24, 0x3a	; 58
 6c6:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_write_string>
				eeprom_write(PASSWORD_COUNTER, 0);
 6ca:	60 e0       	ldi	r22, 0x00	; 0
 6cc:	70 e0       	ldi	r23, 0x00	; 0
 6ce:	8e e1       	ldi	r24, 0x1E	; 30
 6d0:	0e 94 41 00 	call	0x82	; 0x82 <eeprom_write>
 6d4:	2f ef       	ldi	r18, 0xFF	; 255
 6d6:	83 ed       	ldi	r24, 0xD3	; 211
 6d8:	90 e3       	ldi	r25, 0x30	; 48
 6da:	21 50       	subi	r18, 0x01	; 1
 6dc:	80 40       	sbci	r24, 0x00	; 0
 6de:	90 40       	sbci	r25, 0x00	; 0
 6e0:	e1 f7       	brne	.-8      	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
 6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
 6e4:	00 00       	nop
 6e6:	7e c0       	rjmp	.+252    	; 0x7e4 <__LOCK_REGION_LENGTH__+0x3e4>
				_delay_ms(1000);
				break;
				
			} else {
				
				LCD_write_command(0x81);
 6e8:	81 e8       	ldi	r24, 0x81	; 129
 6ea:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
				LCD_write_string(wrong_password_text);
 6ee:	c2 01       	movw	r24, r4
 6f0:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_write_string>
				LCD_write_command(0xc4);
 6f4:	84 ec       	ldi	r24, 0xC4	; 196
 6f6:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
				LCD_write_string(try_again_text);
 6fa:	c1 01       	movw	r24, r2
 6fc:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_write_string>
				
				BUZZER_EN(1)
 700:	d8 9a       	sbi	0x1b, 0	; 27
 702:	2f ef       	ldi	r18, 0xFF	; 255
 704:	83 ed       	ldi	r24, 0xD3	; 211
 706:	90 e3       	ldi	r25, 0x30	; 48
 708:	21 50       	subi	r18, 0x01	; 1
 70a:	80 40       	sbci	r24, 0x00	; 0
 70c:	90 40       	sbci	r25, 0x00	; 0
 70e:	e1 f7       	brne	.-8      	; 0x708 <__LOCK_REGION_LENGTH__+0x308>
 710:	00 c0       	rjmp	.+0      	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
 712:	00 00       	nop
				_delay_ms(1000);
				BUZZER_EN(0)
 714:	d8 98       	cbi	0x1b, 0	; 27
				LCD_write_command(1);
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
				eeprom_write(PASSWORD_COUNTER, (eeprom_read(PASSWORD_COUNTER) + 1));
 71c:	8e e1       	ldi	r24, 0x1E	; 30
 71e:	0e 94 4a 00 	call	0x94	; 0x94 <eeprom_read>
 722:	bc 01       	movw	r22, r24
 724:	6f 5f       	subi	r22, 0xFF	; 255
 726:	7f 4f       	sbci	r23, 0xFF	; 255
 728:	8e e1       	ldi	r24, 0x1E	; 30
 72a:	0e 94 41 00 	call	0x82	; 0x82 <eeprom_write>
 72e:	42 cf       	rjmp	.-380    	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
			
		} else {
			
			// If user entered password 3 times wrong ( Must enter default password )
			
			LCD_write_command(0x80);
 730:	80 e8       	ldi	r24, 0x80	; 128
 732:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
			LCD_write_string(much_wrong_password_text);
 736:	ce 01       	movw	r24, r28
 738:	86 5a       	subi	r24, 0xA6	; 166
 73a:	9f 4f       	sbci	r25, 0xFF	; 255
 73c:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_write_string>
			
			BUZZER_EN(1)
 740:	d8 9a       	sbi	0x1b, 0	; 27
 742:	2f ef       	ldi	r18, 0xFF	; 255
 744:	83 ed       	ldi	r24, 0xD3	; 211
 746:	90 e3       	ldi	r25, 0x30	; 48
 748:	21 50       	subi	r18, 0x01	; 1
 74a:	80 40       	sbci	r24, 0x00	; 0
 74c:	90 40       	sbci	r25, 0x00	; 0
 74e:	e1 f7       	brne	.-8      	; 0x748 <__LOCK_REGION_LENGTH__+0x348>
 750:	00 c0       	rjmp	.+0      	; 0x752 <__LOCK_REGION_LENGTH__+0x352>
 752:	00 00       	nop
			_delay_ms(1000);
			BUZZER_EN(0)
 754:	d8 98       	cbi	0x1b, 0	; 27
			LCD_write_command(1);
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
			
			while (1) {
				LCD_write_command(0x81);
 75c:	81 e8       	ldi	r24, 0x81	; 129
 75e:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
				LCD_write_string(enter_password_text);
 762:	8b 2d       	mov	r24, r11
 764:	9a 2d       	mov	r25, r10
 766:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_write_string>
				LCD_write_command(0xc6);
 76a:	86 ec       	ldi	r24, 0xC6	; 198
 76c:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
				LCD_write_string(hint_password_text);
 770:	ce 01       	movw	r24, r28
 772:	c5 96       	adiw	r24, 0x35	; 53
 774:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_write_string>
				
				LCD_write_command(0xc6);
 778:	86 ec       	ldi	r24, 0xC6	; 198
 77a:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
				user_password = get_password();
 77e:	0e 94 cd 01 	call	0x39a	; 0x39a <get_password>
 782:	6c 01       	movw	r12, r24
				LCD_write_command(1);
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
			
				if (user_password == READ_PASSWORD(DEFAULT_PASSWORD_ADDRESS_1,DEFAULT_PASSWORD_ADDRESS_2)) {
 78a:	8a e0       	ldi	r24, 0x0A	; 10
 78c:	0e 94 4a 00 	call	0x94	; 0x94 <eeprom_read>
 790:	8c 01       	movw	r16, r24
 792:	8b e0       	ldi	r24, 0x0B	; 11
 794:	0e 94 4a 00 	call	0x94	; 0x94 <eeprom_read>
 798:	f8 2e       	mov	r15, r24
 79a:	e1 2c       	mov	r14, r1
 79c:	0e 29       	or	r16, r14
 79e:	1f 29       	or	r17, r15
 7a0:	c0 16       	cp	r12, r16
 7a2:	d1 06       	cpc	r13, r17
 7a4:	59 f4       	brne	.+22     	; 0x7bc <__LOCK_REGION_LENGTH__+0x3bc>
					eeprom_write(PASSWORD_COUNTER, 0);
 7a6:	60 e0       	ldi	r22, 0x00	; 0
 7a8:	70 e0       	ldi	r23, 0x00	; 0
 7aa:	8e e1       	ldi	r24, 0x1E	; 30
 7ac:	0e 94 41 00 	call	0x82	; 0x82 <eeprom_write>
					eeprom_write(FLAG_ADDRESS, 255);
 7b0:	6f ef       	ldi	r22, 0xFF	; 255
 7b2:	70 e0       	ldi	r23, 0x00	; 0
 7b4:	81 e0       	ldi	r24, 0x01	; 1
 7b6:	0e 94 41 00 	call	0x82	; 0x82 <eeprom_write>
					break;
 7ba:	fc ce       	rjmp	.-520    	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
				} else {
					LCD_write_string(much_wrong_password_text);
 7bc:	ce 01       	movw	r24, r28
 7be:	86 5a       	subi	r24, 0xA6	; 166
 7c0:	9f 4f       	sbci	r25, 0xFF	; 255
 7c2:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_write_string>
					BUZZER_EN(1)
 7c6:	d8 9a       	sbi	0x1b, 0	; 27
 7c8:	2f ef       	ldi	r18, 0xFF	; 255
 7ca:	83 ed       	ldi	r24, 0xD3	; 211
 7cc:	90 e3       	ldi	r25, 0x30	; 48
 7ce:	21 50       	subi	r18, 0x01	; 1
 7d0:	80 40       	sbci	r24, 0x00	; 0
 7d2:	90 40       	sbci	r25, 0x00	; 0
 7d4:	e1 f7       	brne	.-8      	; 0x7ce <__LOCK_REGION_LENGTH__+0x3ce>
 7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
 7d8:	00 00       	nop
					_delay_ms(1000);
					BUZZER_EN(0)
 7da:	d8 98       	cbi	0x1b, 0	; 27
					LCD_write_command(1);
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
				}		
			}
 7e2:	bc cf       	rjmp	.-136    	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
	
	// If password is correct and locker's door is opened 
	
	while (1) {
		
		LCD_write_command(1);
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
		LCD_write_string(locker_oppened_text);
 7ea:	c3 57       	subi	r28, 0x73	; 115
 7ec:	df 4f       	sbci	r29, 0xFF	; 255
 7ee:	88 81       	ld	r24, Y
 7f0:	cd 58       	subi	r28, 0x8D	; 141
 7f2:	d0 40       	sbci	r29, 0x00	; 0
 7f4:	c2 57       	subi	r28, 0x72	; 114
 7f6:	df 4f       	sbci	r29, 0xFF	; 255
 7f8:	98 81       	ld	r25, Y
 7fa:	ce 58       	subi	r28, 0x8E	; 142
 7fc:	d0 40       	sbci	r29, 0x00	; 0
 7fe:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_write_string>
		
		timer = 0;
		
		while(KEYPAD_read() == -1){
 802:	02 c0       	rjmp	.+4      	; 0x808 <__LOCK_REGION_LENGTH__+0x408>
			if (READBIT(PINA,1) == 0) { // If locker's door is closed
 804:	c9 9b       	sbis	0x19, 1	; 25
 806:	6d ce       	rjmp	.-806    	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
		LCD_write_command(1);
		LCD_write_string(locker_oppened_text);
		
		timer = 0;
		
		while(KEYPAD_read() == -1){
 808:	0e 94 58 00 	call	0xb0	; 0xb0 <KEYPAD_read>
 80c:	8f 3f       	cpi	r24, 0xFF	; 255
 80e:	d1 f3       	breq	.-12     	; 0x804 <__LOCK_REGION_LENGTH__+0x404>
			if (READBIT(PINA,1) == 0) { // If locker's door is closed
				goto START;
			}
		}
		KEY_DATA = KEYPAD_read();
 810:	0e 94 58 00 	call	0xb0	; 0xb0 <KEYPAD_read>
 814:	18 2f       	mov	r17, r24
		while(KEYPAD_read() != -1){	// long press for 3 second
 816:	0e 94 58 00 	call	0xb0	; 0xb0 <KEYPAD_read>
 81a:	8f 3f       	cpi	r24, 0xFF	; 255
 81c:	b1 f0       	breq	.+44     	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
 81e:	2f ef       	ldi	r18, 0xFF	; 255
 820:	83 ed       	ldi	r24, 0xD3	; 211
 822:	90 e3       	ldi	r25, 0x30	; 48
 824:	21 50       	subi	r18, 0x01	; 1
 826:	80 40       	sbci	r24, 0x00	; 0
 828:	90 40       	sbci	r25, 0x00	; 0
 82a:	e1 f7       	brne	.-8      	; 0x824 <__LOCK_REGION_LENGTH__+0x424>
 82c:	00 c0       	rjmp	.+0      	; 0x82e <__LOCK_REGION_LENGTH__+0x42e>
 82e:	00 00       	nop
 830:	0e 94 58 00 	call	0xb0	; 0xb0 <KEYPAD_read>
 834:	8f 3f       	cpi	r24, 0xFF	; 255
 836:	49 f0       	breq	.+18     	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
 838:	2f ef       	ldi	r18, 0xFF	; 255
 83a:	83 ed       	ldi	r24, 0xD3	; 211
 83c:	90 e3       	ldi	r25, 0x30	; 48
 83e:	21 50       	subi	r18, 0x01	; 1
 840:	80 40       	sbci	r24, 0x00	; 0
 842:	90 40       	sbci	r25, 0x00	; 0
 844:	e1 f7       	brne	.-8      	; 0x83e <__LOCK_REGION_LENGTH__+0x43e>
 846:	00 c0       	rjmp	.+0      	; 0x848 <__LOCK_REGION_LENGTH__+0x448>
 848:	00 00       	nop
			if (timer >= 2) {
				break;
			}
		}

		if (KEY_DATA == '0') { // Allow user to change password
 84a:	10 33       	cpi	r17, 0x30	; 48
 84c:	59 f6       	brne	.-106    	; 0x7e4 <__LOCK_REGION_LENGTH__+0x3e4>
 84e:	cb 56       	subi	r28, 0x6B	; 107
 850:	df 4f       	sbci	r29, 0xFF	; 255
 852:	99 82       	std	Y+1, r9	; 0x01
 854:	88 82       	st	Y, r8
 856:	c5 59       	subi	r28, 0x95	; 149
 858:	d0 40       	sbci	r29, 0x00	; 0
 85a:	c9 56       	subi	r28, 0x69	; 105
 85c:	df 4f       	sbci	r29, 0xFF	; 255
 85e:	79 82       	std	Y+1, r7	; 0x01
 860:	68 82       	st	Y, r6
 862:	c7 59       	subi	r28, 0x97	; 151
 864:	d0 40       	sbci	r29, 0x00	; 0
 866:	c7 56       	subi	r28, 0x67	; 103
 868:	df 4f       	sbci	r29, 0xFF	; 255
 86a:	f9 82       	std	Y+1, r15	; 0x01
 86c:	e8 82       	st	Y, r14
 86e:	c9 59       	subi	r28, 0x99	; 153
 870:	d0 40       	sbci	r29, 0x00	; 0
 872:	c5 56       	subi	r28, 0x65	; 101
 874:	df 4f       	sbci	r29, 0xFF	; 255
 876:	59 82       	std	Y+1, r5	; 0x01
 878:	48 82       	st	Y, r4
 87a:	cb 59       	subi	r28, 0x9B	; 155
 87c:	d0 40       	sbci	r29, 0x00	; 0
 87e:	c3 56       	subi	r28, 0x63	; 99
 880:	df 4f       	sbci	r29, 0xFF	; 255
 882:	39 82       	std	Y+1, r3	; 0x01
 884:	28 82       	st	Y, r2
 886:	cd 59       	subi	r28, 0x9D	; 157
 888:	d0 40       	sbci	r29, 0x00	; 0
 88a:	8b 2c       	mov	r8, r11
 88c:	9a 2c       	mov	r9, r10
 88e:	cf 56       	subi	r28, 0x6F	; 111
 890:	df 4f       	sbci	r29, 0xFF	; 255
 892:	78 80       	ld	r7, Y
 894:	c1 59       	subi	r28, 0x91	; 145
 896:	d0 40       	sbci	r29, 0x00	; 0
 898:	ce 56       	subi	r28, 0x6E	; 110
 89a:	df 4f       	sbci	r29, 0xFF	; 255
 89c:	58 80       	ld	r5, Y
 89e:	c2 59       	subi	r28, 0x92	; 146
 8a0:	d0 40       	sbci	r29, 0x00	; 0
 8a2:	cd 56       	subi	r28, 0x6D	; 109
 8a4:	df 4f       	sbci	r29, 0xFF	; 255
 8a6:	38 80       	ld	r3, Y
 8a8:	c3 59       	subi	r28, 0x93	; 147
 8aa:	d0 40       	sbci	r29, 0x00	; 0
 8ac:	cc 56       	subi	r28, 0x6C	; 108
 8ae:	df 4f       	sbci	r29, 0xFF	; 255
 8b0:	f8 80       	ld	r15, Y
 8b2:	c4 59       	subi	r28, 0x94	; 148
 8b4:	d0 40       	sbci	r29, 0x00	; 0
			CHANGE_PASSWORD:
			LCD_write_command(1);
 8b6:	81 e0       	ldi	r24, 0x01	; 1
 8b8:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
			LCD_write_command(0x82);
 8bc:	82 e8       	ldi	r24, 0x82	; 130
 8be:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
			LCD_write_string(old_password_text);
 8c2:	ce 01       	movw	r24, r28
 8c4:	49 96       	adiw	r24, 0x19	; 25
 8c6:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_write_string>
			LCD_write_command(0xc6);
 8ca:	86 ec       	ldi	r24, 0xC6	; 198
 8cc:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
			LCD_write_string(hint_password_text);
 8d0:	ce 01       	movw	r24, r28
 8d2:	c5 96       	adiw	r24, 0x35	; 53
 8d4:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_write_string>

			while(KEYPAD_read() != -1){}
 8d8:	0e 94 58 00 	call	0xb0	; 0xb0 <KEYPAD_read>
 8dc:	8f 3f       	cpi	r24, 0xFF	; 255
 8de:	e1 f7       	brne	.-8      	; 0x8d8 <__stack+0x79>
			LCD_write_command(0xc6);
 8e0:	86 ec       	ldi	r24, 0xC6	; 198
 8e2:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
			user_password = get_password();
 8e6:	0e 94 cd 01 	call	0x39a	; 0x39a <get_password>
 8ea:	6c 01       	movw	r12, r24
	
			if (user_password == READ_PASSWORD(USER_PASSWORD_ADDRESS_1,USER_PASSWORD_ADDRESS_2)) {
 8ec:	84 e1       	ldi	r24, 0x14	; 20
 8ee:	0e 94 4a 00 	call	0x94	; 0x94 <eeprom_read>
 8f2:	8c 01       	movw	r16, r24
 8f4:	85 e1       	ldi	r24, 0x15	; 21
 8f6:	0e 94 4a 00 	call	0x94	; 0x94 <eeprom_read>
 8fa:	b8 2e       	mov	r11, r24
 8fc:	a1 2c       	mov	r10, r1
 8fe:	0a 29       	or	r16, r10
 900:	1b 29       	or	r17, r11
 902:	c0 16       	cp	r12, r16
 904:	d1 06       	cpc	r13, r17
 906:	09 f0       	breq	.+2      	; 0x90a <__stack+0xab>
 908:	54 c0       	rjmp	.+168    	; 0x9b2 <__stack+0x153>
 90a:	c9 56       	subi	r28, 0x69	; 105
 90c:	df 4f       	sbci	r29, 0xFF	; 255
 90e:	68 80       	ld	r6, Y
 910:	79 80       	ldd	r7, Y+1	; 0x01
 912:	c7 59       	subi	r28, 0x97	; 151
 914:	d0 40       	sbci	r29, 0x00	; 0
 916:	c7 56       	subi	r28, 0x67	; 103
 918:	df 4f       	sbci	r29, 0xFF	; 255
 91a:	e8 80       	ld	r14, Y
 91c:	f9 80       	ldd	r15, Y+1	; 0x01
 91e:	c9 59       	subi	r28, 0x99	; 153
 920:	d0 40       	sbci	r29, 0x00	; 0
 922:	c1 57       	subi	r28, 0x71	; 113
 924:	df 4f       	sbci	r29, 0xFF	; 255
 926:	b9 82       	std	Y+1, r11	; 0x01
 928:	a8 82       	st	Y, r10
 92a:	cf 58       	subi	r28, 0x8F	; 143
 92c:	d0 40       	sbci	r29, 0x00	; 0
 92e:	c5 56       	subi	r28, 0x65	; 101
 930:	df 4f       	sbci	r29, 0xFF	; 255
 932:	48 80       	ld	r4, Y
 934:	59 80       	ldd	r5, Y+1	; 0x01
 936:	cb 59       	subi	r28, 0x9B	; 155
 938:	d0 40       	sbci	r29, 0x00	; 0
 93a:	c3 56       	subi	r28, 0x63	; 99
 93c:	df 4f       	sbci	r29, 0xFF	; 255
 93e:	28 80       	ld	r2, Y
 940:	39 80       	ldd	r3, Y+1	; 0x01
 942:	cd 59       	subi	r28, 0x9D	; 157
 944:	d0 40       	sbci	r29, 0x00	; 0
 946:	b8 2c       	mov	r11, r8
 948:	a9 2c       	mov	r10, r9
 94a:	cb 56       	subi	r28, 0x6B	; 107
 94c:	df 4f       	sbci	r29, 0xFF	; 255
 94e:	88 80       	ld	r8, Y
 950:	99 80       	ldd	r9, Y+1	; 0x01
 952:	c5 59       	subi	r28, 0x95	; 149
 954:	d0 40       	sbci	r29, 0x00	; 0
		
				LCD_write_command(1);
 956:	81 e0       	ldi	r24, 0x01	; 1
 958:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
				LCD_write_command(0x82);
 95c:	82 e8       	ldi	r24, 0x82	; 130
 95e:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
				LCD_write_string(create_password_text);
 962:	c5 57       	subi	r28, 0x75	; 117
 964:	df 4f       	sbci	r29, 0xFF	; 255
 966:	88 81       	ld	r24, Y
 968:	cb 58       	subi	r28, 0x8B	; 139
 96a:	d0 40       	sbci	r29, 0x00	; 0
 96c:	c4 57       	subi	r28, 0x74	; 116
 96e:	df 4f       	sbci	r29, 0xFF	; 255
 970:	98 81       	ld	r25, Y
 972:	cc 58       	subi	r28, 0x8C	; 140
 974:	d0 40       	sbci	r29, 0x00	; 0
 976:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_write_string>
				LCD_write_command(0xc6);
 97a:	86 ec       	ldi	r24, 0xC6	; 198
 97c:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
				LCD_write_string(hint_password_text);
 980:	ce 01       	movw	r24, r28
 982:	c5 96       	adiw	r24, 0x35	; 53
 984:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_write_string>

				LCD_write_command(0xc6);
 988:	86 ec       	ldi	r24, 0xC6	; 198
 98a:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
				user_password = get_password();
 98e:	0e 94 cd 01 	call	0x39a	; 0x39a <get_password>
 992:	08 2f       	mov	r16, r24
 994:	19 2f       	mov	r17, r25
				LCD_write_command(1);
 996:	81 e0       	ldi	r24, 0x01	; 1
 998:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
				eeprom_write(USER_PASSWORD_ADDRESS_1, user_password);
 99c:	60 2f       	mov	r22, r16
 99e:	71 2f       	mov	r23, r17
 9a0:	84 e1       	ldi	r24, 0x14	; 20
 9a2:	0e 94 41 00 	call	0x82	; 0x82 <eeprom_write>
				eeprom_write(USER_PASSWORD_ADDRESS_2, (user_password>>8));
 9a6:	61 2f       	mov	r22, r17
 9a8:	70 e0       	ldi	r23, 0x00	; 0
 9aa:	85 e1       	ldi	r24, 0x15	; 21
 9ac:	0e 94 41 00 	call	0x82	; 0x82 <eeprom_write>
 9b0:	19 cf       	rjmp	.-462    	; 0x7e4 <__LOCK_REGION_LENGTH__+0x3e4>
				
			} else {
				
				LCD_write_command(0x81);
 9b2:	81 e8       	ldi	r24, 0x81	; 129
 9b4:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
				LCD_write_string(wrong_password_text);
 9b8:	87 2d       	mov	r24, r7
 9ba:	95 2d       	mov	r25, r5
 9bc:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_write_string>
				LCD_write_command(0xc4);
 9c0:	84 ec       	ldi	r24, 0xC4	; 196
 9c2:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
				LCD_write_string(try_again_text);
 9c6:	83 2d       	mov	r24, r3
 9c8:	9f 2d       	mov	r25, r15
 9ca:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_write_string>
				
				BUZZER_EN(1)
 9ce:	d8 9a       	sbi	0x1b, 0	; 27
 9d0:	2f ef       	ldi	r18, 0xFF	; 255
 9d2:	83 ed       	ldi	r24, 0xD3	; 211
 9d4:	90 e3       	ldi	r25, 0x30	; 48
 9d6:	21 50       	subi	r18, 0x01	; 1
 9d8:	80 40       	sbci	r24, 0x00	; 0
 9da:	90 40       	sbci	r25, 0x00	; 0
 9dc:	e1 f7       	brne	.-8      	; 0x9d6 <__stack+0x177>
 9de:	00 c0       	rjmp	.+0      	; 0x9e0 <__stack+0x181>
 9e0:	00 00       	nop
				_delay_ms(1000);
				BUZZER_EN(0)
 9e2:	d8 98       	cbi	0x1b, 0	; 27
				LCD_write_command(1);
 9e4:	81 e0       	ldi	r24, 0x01	; 1
 9e6:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_write_command>
				
				goto CHANGE_PASSWORD;
 9ea:	65 cf       	rjmp	.-310    	; 0x8b6 <__stack+0x57>

000009ec <_exit>:
 9ec:	f8 94       	cli

000009ee <__stop_program>:
 9ee:	ff cf       	rjmp	.-2      	; 0x9ee <__stop_program>
